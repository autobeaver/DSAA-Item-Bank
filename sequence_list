class LNode: #node
    def __init__(self,elem,next_ = None):
        self.elem = elem
        self.next = next_
class LList: #list
    def __init__(self):
        self._head = None #head node
        
    def is_empty(self):
        return self._head is None
    
    def prepend(self,elem): #insert data form the head
        self._head = LNode(elem,self._head)
        
    def append(self,elem):
        if self._head is None:
            self._head = LNode(elem)
            return
        p = self._head
        while p.next is not None:
            p = p.next
        p.next = LNode(elem)
        
    def pop(self):
        if self._head is None:
            raise LinkedListUnderflow("in pop")
        e = self._head.elem
        self._head = self._head.next
        return e
    
    def pop_last(self):
        if self._head is None:
            raise LinkedListUnderflow("in pop")
        p = self._head
        if p.next is None:
            e = p.elem
            self._head = None
            return e
        while p.next.next is not None:
            p = p.next
        e = p.next.elem
        p.next = None
        return e
    
