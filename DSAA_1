#1.1
def ismultiple(n,m):
    i = n / m
    j = n//m
    if isinstance(n,int) and isinstance(m,int) and i == j:
        return True
    else:
        return False


#1.2
def is_even(k):
    if not isinstance(k,int):
        raise TypeError('not int')
    k = abs(k)
    if k == 0:
        return True
    while k >= 1:
        k -= 2
        if k == 0:
            return True
        else:
            return False
if __name__ == '__main__':
    x = is_even(-2)
    y = is_even(0)
    z = is_even(3)


#1.3
def minmax(data):
    if not isinstance(data,list):
        raise TypeError('not a list')
    data.sort(reverse=False)
    botom = data[0]
    top = data[-1]
    return tuple([botom,top])
    
if __name__ == '__main__':
    x = minmax([1,2,2])
    y = minmax([2,3,1])
    z = minmax([2,-2,0])
    
    
#1.29 浅拷贝、深拷贝
raw = ['c', 'a', 't', 'd', 'o', 'g']
words = []
for a in range(len(raw)):
    word = ''
    word = word + str(raw[a])
    raw2 = list(raw)
    raw2.remove(raw[a])
    for b in range(len(raw2)):
        word4 = str(word)
        word = word + str(raw2[b])
        raw3 = list(raw2)
        raw3.remove(raw2[b])
        for c in range(len(raw3)):
            word3 = str(word)
            word = word + str(raw3[c])
            raw4 = list(raw3)
            raw4.remove(raw3[c])
            for d in range(len(raw4)):
                word2 = str(word)
                word = word + str(raw4[d])
                raw5 = list(raw4)
                raw5.remove(raw4[d])
                for e in range(len(raw5)):
                    word1 = str(word)
                    word = word + str(raw5[e])
                    raw6 = list(raw5)
                    raw6.remove(raw5[e])
                    word = word + str(raw6[0])
                    if len(word) == 6:
                        words.append(word)
                    word = str(word1)
                word = str(word2)
            word = str(word3)
        word = str(word4)


#1.20
def bisection_time(x):
    if not isinstance(x,int):
        raise TypeError('x is not int type')
    if x < 2:
        raise ValueError('x < 2')
    n = 0
    while x >= 2:
        a = x/2
        b = x//2
        if a==b:
            n += 1
            x = x/2
        else:
            return n
    return n
if __name__ == '__main__':
    #x1 = bisection_time(2.0)
    #x2 = bisection_time(-3)
    x3 = bisection_time(47)
    x4 = bisection_time(64)

#4.1
def find_max(s,x,n=0):
    """ Find the max in the sequence.
    
    Args:
        s:the sequence
        x:s[0]
        """
    if n < len(s) - 1:
        n += 1
        if x < s[n]:
            x = s[n]
            return find_max(s,x,n)
    else:
        return x
if __name__ == '__main__':
    find_max([1,2,3,4],1)
#  O(n)
            

#4.6
def harmonic_number(n,x=0.0):
    x += 1/n
    if n > 1:
        return harmonic_number(n-1,x)
    else:
        return x

if __name__ == '__main__':
    x = harmonic_number(3)
    

#4.10
def log_round(n,x=0):
    if n <= 0:
        raise ValueError('n < 0')
    if n >= 1 and n // 2 >= 1:
        x += 1
        return log_round(n/2,x)
    elif n >= 1 and n // 2 < 1:
        return x
    elif n > 0 and n < 1 and n * 2 <= 1:
        x -= 1
        return log_round(n*2,x)
    else:
        return x
        

import math
if __name__ == '__main__':
    x = (log_round(0.2),math.log(0.2,2))
    y = (log_round(9),math.log(9,2))
    z = (log_round(8),math.log(8,2))
    w = (log_round(1),math.log(1,2))
