#4.1
def find_max(s,x,n=0):
    """ Find the max in the sequence.
    
    Args:
        s:the sequence
        x:s[0]
        """
    if n < len(s) - 1:
        n += 1
        if x < s[n]:
            x = s[n]
            return find_max(s,x,n)
    else:
        return x
if __name__ == '__main__':
    find_max([1,2,3,4],1)
#  O(n)
            

#4.6
def harmonic_number(n,x=0.0):
    x += 1/n
    if n > 1:
        return harmonic_number(n-1,x)
    else:
        return x

if __name__ == '__main__':
    x = harmonic_number(3)
    

#4.10
def log_round(n,x=0):
    if n <= 0:
        raise ValueError('n < 0')
    if n >= 1 and n // 2 >= 1:
        x += 1
        return log_round(n/2,x)
    elif n >= 1 and n // 2 < 1:
        return x
    elif n > 0 and n < 1 and n * 2 <= 1:
        x -= 1
        return log_round(n*2,x)
    else:
        return x
        

import math
if __name__ == '__main__':
    x = (log_round(0.2),math.log(0.2,2))
    y = (log_round(9),math.log(9,2))
    z = (log_round(8),math.log(8,2))
    w = (log_round(1),math.log(1,2))
